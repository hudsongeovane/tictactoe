{"version":3,"sources":["Components.js","App.js","serviceWorker.js","index.js"],"names":["Square","_this","this","react_default","a","createElement","className","onClick","props","value","React","Component","ResetButton","_this2","Board","_this3","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","boardstatus","Array","fill","xNext","IAFirst","i","_this4","Components_Square","handleClick","squares","slice","winner","m","board","AIPlayer","console","log","bestMoveScore","move","movesMade","countMoves","length","newBoard","validMove","moveScore","minScore","maxScore","concat","findAiMove","setState","_this5","status","tie","align","renderSquare","Components_ResetButton","class","resetGame","Game","Components_Board","maxPlayer","minPlayer","player","depth","bestMoveValue","predictedMoveValue","copyBoard","App","Components","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8894d9dd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <td className=\"square\" onClick={() => this.props.onClick() }>\n        {this.props.value}\n      </td>\n    );\n  }\n}\n\nclass ResetButton extends React.Component {\n  render() {\n    const reset = \"Reset Game\";\n\n    return (\n      <tr>\n        <td className=\"resetButton\" onClick={() => this.props.onClick() }>\n        {reset}\n        </td>\n      </tr>\n    )\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boardstatus: Array(9).fill(null),\n      xNext: true,\n      IAFirst: false,\n    };\n  }\n  renderSquare(i) {\n    return <Square value={this.state.boardstatus[i]} onClick={() => this.handleClick(i)} />;\n  }\n  handleClick(i) {\n    const squares = this.state.boardstatus.slice();\n    if (winner(squares,'X') || winner(squares,'O')) return;\n    if (squares[i] == null) { //For not clicking the same button twice.\n      squares[i] = this.state.xNext ? 'X' : 'O';\n      //this.setState({boardstatus: squares, xNext: !this.state.xNext});\n      var m = findAiMove(squares,this.state.xNext ? 'O' : 'X');\n      console.log(m);\n      squares[m] = this.state.xNext ? 'O' : 'X'; //Not updated xNext yet.\n      this.setState({boardstatus: squares, xNext: this.state.xNext, IAFirst: this.state.IAFirst});\n    }\n  }\n  resetGame() {\n    if (!this.state.IAFirst) {\n      const squares = Array(9).fill(null);\n      squares[0] = 'X';\n      this.setState({boardstatus: squares, xNext: false, IAFirst: true});\n    }\n    else {\n      this.setState({boardstatus: Array(9).fill(null), xNext: true, IAFirst: false});\n    }\n  }\n  render() {\n    let status = \"\";\n    if (winner(this.state.boardstatus,'X')) status = \"Player X won the game. Click reset to play more\";\n    if (winner(this.state.boardstatus,'O')) status = \"Player O won the game. Click reset to play more\";\n    if (tie(this.state.boardstatus)) status = \"It is a tie. Click reset if you want to play more\";\n    return (\n      <div>\n      <div>\n        <p>{status}</p>\n      </div>\n      <div>\n      <table align=\"center\">\n      <tbody>\n        <tr>\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </tr>\n        <tr>\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </tr>\n        <tr>\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </tr>\n        <ResetButton class=\"resetButton\" onClick={() => this.resetGame()}/>\n      </tbody>\n      </table>\n      </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div>\n        <div>\n          <Board />\n        </div>\n        <div>\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\nvar maxPlayer = 'X';\nvar minPlayer = 'O';\n\n\nfunction copyBoard(board) {\n  return board.slice(0);\n}\nfunction winner(board, player){\n  if (\n        (board[0] === player && board[1] === player && board[2] === player) ||\n        (board[3] === player && board[4] === player && board[5] === player) ||\n        (board[6] === player && board[7] === player && board[8] === player) ||\n        (board[0] === player && board[3] === player && board[6] === player) ||\n        (board[1] === player && board[4] === player && board[7] === player) ||\n        (board[2] === player && board[5] === player && board[8] === player) ||\n        (board[0] === player && board[4] === player && board[8] === player) ||\n        (board[2] === player && board[4] === player && board[6] === player)\n        ) {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction countMoves(board) {\n  let movesMade = 0;\n  for(let i = 0; i < board.length; i++) {\n    if (board[i] != null) movesMade++;\n  }\n  return movesMade;\n}\nfunction tie(board) {\n  for(let i = 0; i < 9; i++) {\n    if (board[i] !== 'X' && board[i] !== 'O') return false;\n  }\n  return true;\n}\nfunction findAiMove(board,AIPlayer) {\n  console.log(AIPlayer);\n  var bestMoveScore = AIPlayer === 'X' ? -100 : 100;\n  let move = null;\n  //Test Every Possible Move if the game is not already over.\n  if(winner(board, 'X') || winner(board, 'O' || tie(board))) {\n    return null;\n  }\n  let movesMade = countMoves(board);\n\n  for(var i = 0; i < board.length; i++){\n    let newBoard = validMove(i, AIPlayer, board);\n    if(newBoard) {\n      var moveScore = (AIPlayer === 'X') ? minScore(newBoard,9-movesMade) : maxScore(newBoard,10 - movesMade);\n      let s = \"\";\n      console.log(s.concat(\"move \",i,\" moveScore \",moveScore));\n      if (AIPlayer === 'O')\n        if (moveScore < bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = i;\n        }\n      if (AIPlayer === 'X')\n        if (moveScore > bestMoveScore) {\n          bestMoveScore = moveScore;\n          move = i;\n        }\n    }\n  }\n  return move;\n}\n\nfunction minScore(board,depth) {\n  if (winner(board, 'X')) {\n    return 10* (10 - countMoves(board)); //10 because countMoves can be 9\n  } else if (winner(board, 'O')) {\n    return -10 * (10 - countMoves(board));\n  } else if (tie(board)) {\n    return 0;\n  } else if (depth === 0) {\n    console.log(depth);\n    return 0;\n  } else {\n    var bestMoveValue = 100;\n    for (var i = 0; i < board.length; i++) {\n      var newBoard = validMove(i, minPlayer, board);\n      if (newBoard) {\n        var predictedMoveValue = maxScore(newBoard,depth-1);\n        if (predictedMoveValue < bestMoveValue) {\n          bestMoveValue = predictedMoveValue;\n        }\n      }\n    }\n    return bestMoveValue;\n  }\n}\nfunction maxScore(board,depth) {\n   if(winner(board, 'X')) {\n    return 10 * (10 - countMoves(board));\n  } else if(winner(board, 'O')) {\n    return -10 * (10 - countMoves(board));\n  } else if(tie(board)) {\n    return 0;\n  } else if (depth === 0) {\n    return 0;\n  } else {\n    var bestMoveValue = -100;\n    for (var i = 0; i < board.length; i++) {\n      var newBoard = validMove(i, maxPlayer, board);\n      if (newBoard) {\n        var predictedMoveValue = minScore(newBoard,depth-1);\n        if (predictedMoveValue > bestMoveValue) {\n          bestMoveValue = predictedMoveValue;\n        }\n      }\n    }\n    return bestMoveValue;\n  }\n}\n\nfunction validMove(move, player, board){\n  var newBoard = copyBoard(board);\n  if(newBoard[move] === null){\n    newBoard[move] = player;\n    return newBoard;\n  } else\n    return null;\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Game from './Components'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Game />\n          <p>TicTacToe IA devoloped by <a href=\"https://github.com/hudsongeovane/\">@hudsongeovane</a></p>\n          <a href=\"https://github.com/hudsongeovane/tictactoe\">\n            Github Project\n          </a>\n\n        </header>\n      </div>\n);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}